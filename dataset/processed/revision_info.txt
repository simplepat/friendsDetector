arguments: src/align/align_dataset_mtcnn.py Dataset/raw Dataset/processed --image_size 160 --margin 32 --random_order --gpu_memory_fraction 0.25
--------------------
tensorflow version: 1.7.1
--------------------
git hash: b'096ed770f163957c1e56efa7feeb194773920f6e'
--------------------
b"diff --git a/src/align/align_dataset_mtcnn.py b/src/align/align_dataset_mtcnn.py\nindex 7d5e735..887ad9f 100644\n--- a/src/align/align_dataset_mtcnn.py\n+++ b/src/align/align_dataset_mtcnn.py\n@@ -32,7 +32,7 @@ import argparse\n import tensorflow as tf\n import numpy as np\n import facenet\n-import align.detect_face\n+import detect_face\n import random\n from time import sleep\n \n@@ -52,7 +52,7 @@ def main(args):\n         gpu_options = tf.GPUOptions(per_process_gpu_memory_fraction=args.gpu_memory_fraction)\n         sess = tf.Session(config=tf.ConfigProto(gpu_options=gpu_options, log_device_placement=False))\n         with sess.as_default():\n-            pnet, rnet, onet = align.detect_face.create_mtcnn(sess, None)\n+            pnet, rnet, onet = detect_face.create_mtcnn(sess, None)\n     \n     minsize = 20 # minimum size of face\n     threshold = [ 0.6, 0.7, 0.7 ]  # three steps's threshold\n@@ -93,7 +93,7 @@ def main(args):\n                             img = facenet.to_rgb(img)\n                         img = img[:,:,0:3]\n     \n-                        bounding_boxes, _ = align.detect_face.detect_face(img, minsize, pnet, rnet, onet, threshold, factor)\n+                        bounding_boxes, _ = detect_face.detect_face(img, minsize, pnet, rnet, onet, threshold, factor)\n                         nrof_faces = bounding_boxes.shape[0]\n                         if nrof_faces>0:\n                             det = bounding_boxes[:,0:4]"